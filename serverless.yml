# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: eduardocabrera
# "service" is the name of this project. This will also be added to your AWS resource names.
service: appointment-medic

frameworkVersion: "4"

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: dev
  memorySize: 512
  timeout: 10
  environment:
    DYNAMODB_TABLE_NAME: ${cf:AppointmentCdkStack.AppointmentsTableName}
    SNS_TOPIC_ARN: ${cf:AppointmentCdkStack.AppointmentTopicArn}
    EVENT_BUS_NAME: ${cf:AppointmentCdkStack.AppointmentEventBusName}
    DB_ENDPOINT: ${cf:AppointmentCdkStack.AppointmentDbEndpoint}
    DB_PORT: ${cf:AppointmentCdkStack.AppointmentDbPort}
    DB_NAME: ${cf:AppointmentCdkStack.AppointmentDbName}
    DB_SECRET_ARN: ${cf:AppointmentCdkStack.AppointmentDbSecretArn}
    QUEUE_COMPLETED_ARN: ${cf:AppointmentCdkStack.BackupQueueArn}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource: ${cf:AppointmentCdkStack.AppointmentDbSecretArn}

functions:
  appointment:
    handler: src/handlers/appointment.handler
    events:
      - http:
          path: appointment
          method: post
      - http:
          path: appointment/{insuredId}
          method: get
      - sqs:
          arn: ${cf:AppointmentCdkStack.BackupQueueArn}

  appointment_pe:
    handler: src/handlers/appointment_pe.handler
    events:
      - sqs:
          arn: ${cf:AppointmentCdkStack.QueuePEName}

  appointment_cl:
    handler: src/handlers/appointment_cl.handler
    events:
      - sqs:
          arn: ${cf:AppointmentCdkStack.QueueCLName}

package:
  individually: false
